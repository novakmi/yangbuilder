yangbuilder
===========
:Author:    Michal Nov√°k
:Email:     it.novakmi@gmail.com
:URL:       https://bitbucket.org/novakmi/yangbuilder
:Date:      2016-12-12
:Revision:  1.2.0

This  document describes how to use Groovy builder for the Yang data modeling language.
The document is written in http://www.methods.co.nz/asciidoc/[AsciiDoc].

== Version history

[options="header"]
|======
| Version     | Notes          | Date        | Author
| 0.0.1       | Initial version| 2012-04-14  | {author}
| 1.0.0       | Updated        | 2013-03-08  | {author}
| 1.1.0       | Updated        | 2015-04-10  | {author}
| {revision}  | Updated        | {date}      | {author}
|======

== References

[bibliography]
* [[[yang]]] http://www.netconfcentral.org/yang_docs[YANG Data Modeling Language]
* [[[RFC6020]]] RFC for http://www.ietf.org/rfc/rfc6020.txt[YANG - A Data Modeling Language for the Network Configuration Protocol (NETCONF)]
* [[[groovy]]] http://groovy-lang.org/[Groovy - a dynamic language for JAVA platform]
* [[[nodebuilder]]] https://bitbucket.org/novakmi/nodebuilder[Library for creation of groovy builders with plugin support]
* [[[yangbuilder]]] https://bitbucket.org/novakmi/yangbuilder[Groovy builder for YANG] - described in this document
* [[[pyang]]] https://github.com/mbj4668/pyang - Python <<yang>> parser, converter

== Terminology

* *Yang:* a Data Modeling Language for the Network Configuration Protocol (NETCONF), see <<RFC6020>>
* *Groovy builder:*  http://en.wikipedia.org/wiki/Design_Patterns[builder design pattern] implemented in the <<groovy>>, 
  with support for DSL (Domain Specific Language), see http://groovy-lang.org/dsls.html#_builders[groovy builders]

== License

The <<yangbuilder>> is free software, licensed under http://en.wikipedia.org/wiki/MIT_License[MIT Licnense].

----
include::../LICENSE[]
----

== Introduction

NOTE: _This document is still work in progress. Please take a look at the examples in the `templates\scripts` directory 
       and at the tests in the `tests\groovy` directory to see usage of all <<yangbuilder>> features._

The <<yang>> modeling language is used to describe data model. It can be compared to the *XML Schema* (*XSD*), however, the syntax is different.
The <<groovy>> builder can be used to create parent-child oriented data documents (e.g. *XSD*, *XML*). See, for example,
http://groovy-lang.org/processing-xml.html#_creating_xml[creating XML] chapter how to use <<groovy>> builder for *XML*.

The syntax of the data model written in the <<yang>> resembles syntax used in the <<groovy>> builder. 

=== <<yang>> example

.Yang example from the Yang tutorial (shortened)
[source, groovy]
----
container timeout {                                             <1>
    leaf access-timeout {                                       <2>
        description "Maximum time without server response";
        type uint32;
    }
    leaf retry-timer {
        description "Period to retry operation";                <3>
        type uint32;
    }
}
----
<1> parent element
<2> child element with sub-elements/attributes (e.g. +type+ is sub-element/attribute)
<3> All semicolons `;` are optional

=== groovy <<yangbuilder>> example

.Yang example from the Yang tutorial (shortened) written in the <<groovy>> yangbuilder
[source, groovy]
----
container "timeout", {                                             <1>
    leaf "access-timeout", {                                       <2>
        description "Maximum time without server response";
        type uint32;
    }
    leaf "retry-timer",  {                                         
        description "Period to retry operation";
        type uint32;
    }
}
----
<1> parent element
<2> child element with other child sub-elements (e.g. +type+)

There is only little syntax difference between the <<groovy>> and the <<yang>> version.

NOTE: The <<groovy>> syntax in the example above was written to be similar to the <<yang>>.
      The difference are only the `,` comma after element name (needed only for elements containing sub-elements) and apostrophes (or quotation marks).
      The comma `,` can be replaced by parentheses, e.g. `leaf("access-timeout)`
      In <<groovy>> you can also omit all semicolons. 

=== groovy <<yangbuilder>> compact syntax example

With the <<yangbuilder> one can use compact syntax, to reduce number of lines of the data model.

.Yang example from the Yang tutorial (shortened) written in the <<groovy>> yangbuilder compact syntax
----
container "timeout", {                                             
    leaf "access-timeout", type: uint32, description: "Maximum time without server response" <1>
    leaf "retry-timer", type: uint32, description: "Period to retry operation"
}
----
<1> The child elements can be written as leaf attributes, attribute name and value is separated with colon `:`

NOTE: The compact syntax can be used only if `CompactYangPlugin` is registered.

=== <<yangbuilder>> overview

==== History

There already existed an idea of <<groovy>> builder for the <<yang>>, which was part of one project I participated in (not publicly available). 

When implementing <<groovy>> builder for http://plantuml.sourceforge.net/[PlantUML], called https://bitbucket.org/novakmi/plantumlbuilder[plantumlbuilder],
a common builder library <<nodebuilder>> was created. It represents base library to support implementation of textual <<groovy>> builders. 
The <<yangbuilder>> is based on this common library.

==== Pros and Cons

*Pros:*

* similar syntax to the <<yang>>
* more advanced reuse (functions, closures, parametrization)
* use of programming language (loops, functions, variables, conditions, etc.)
* <<groovy>> conditions can be used to build feature specific versions of the data models (more powerful than `if-feature`)
* (groovy) support in IDE (navigation, syntax highlighting, formatting)
* reduce number of lines to maintain (together with the `CompactYangPlugin`)
* plugins (write extension of the <<yangbuilder>>
* the <<yang>> can be easily generated by calling <<groovy>> script

*Cons:*

* additional step - the <<yang>> file has to be generated from <<groovy>> script or application
* <<yangbuilder>> does not support <<yang>> syntax validation (use <<pyang>> for validation)

=== Dependencies

* <<groovy>> 1.8.6 and newer has to be installed on the system (preferably with +GROOVY_HOME+ set and +$GROOVY_HOME/bin+ in the the system +PATH+)
* `nodebuilder` jar file
* `yangbuilder` jar file

NOTE: <<nodebuilder>> and <<yangbuilder>> jar files do not need to be downloaded if <<groovy>> `@Grab` can be used (and the Internet connection is available)

NOTE: It is recommended to use <<groovy>> of version 2.1.9 and newer, for older version of <<groovy>> special version of the `nodebuilder` must be used
      (usually `x.x.x.1` - e.g. `1.0.0.1`)


=== Installation

In most cases, there is no need for special installation of the <<yangbuilder>>, if you have installed <<groovy>> of version 2.1.9 (1.8.6) or newer and you have an Internet connection.
The <<groovy>> script generating <<yang>> file can download all required dependencies with the use of <<groovy>>http://docs.groovy-lang.org/latest/html/documentation/grape.html[Grape] feature.
See +templates/scripts+ directory for example scripts. Usually, first run of the script takes some time (downloading dependencies). During next run, no dependencies are 
downloaded and an Internet connection is not needed anymore.

It is also possible to run script or <<groovy>> application in regular (<<groovy>>/Java) way by supplying `classpath` to the dependent `jar` files.
For example

[source,bash]
----
groovy -cp nodebuilder.jar:yangbuilder.jar my-yang-model.groovy
----

== Using yangbuilder

See `templates/scripts` directory to see how to write <<yangbuilder>> scripts and generate yang files.
See `templates/project` directory for sample project that generates several (related) yang files in one <<groovy>> application

=== Examples

==== acmeYang

This example are <<groovy>> source scripts that generates <<yang>> file adopted from the Yang tutorial http://www.yang-central.org/twiki/bin/view/Main/YangTutorials.

See `templates\scripts\acme`

=====  simple variant

[source,groovy]
.acmeYang.groovy - example of the <<yangbuilder>> script without `CompactYangPlugin`
----
#!/usr/bin/env groovy        //<1>
@Grab(group = 'org.bitbucket.novakmi', module = 'nodebuilder', version = '1.0.0') //<2>
@Grab(group = 'org.bitbucket.novakmi', module = 'yangbuilder', version = '1.2.0')

def builder = new org.bitbucket.novakmi.yangbuilder.YangBuilder() //<3>
moduleName = "acme-module"  //name of file to generate

def makeModuleHeader(builder) {
    builder.header(_ygn:true) { //any node with attribute '_ygn' is  ignored
        namespace "http://acme.example.com/module"; //<4>
        prefix "acme"
        yngbuild '' //yngbuild '' means new line without indentation

        'import' "yang-types", { //<5>            
            prefix "yang"
        }
        include "acme-system"
        yngbuild ''

        organization 'ACME Inc.'
        contact 'joe@acme.example.com'        
        description '''The module for entities
                       implementing the ACME products.''' //<6>

        yngbuild ''
        revision "2007-06-09", {
            description "Initial revision."
        }
        yngbuild ''
    }
}

def makeModule(builder) {
    builder.module moduleName, {

        makeModuleHeader(builder)

        leaf "host-name", {
            type "string"
            mandatory true
            config true
            description "Hostname for this system"
        }

        "leaf-list" "domain-search", {
            type "string"
            "ordered-by" "user"
            description "List of domain names to search"
        }
    }
}

builder.yangroot { //<7>
    geninfo file: "acmeYang.groovy", time: true,
        cmt: "Example implementation from yang tutorial http://www.yang-central.org/twiki/bin/view/Main/YangTutorials" //<8>
    
    makeModule(builder) //<9>
}

builder.writeToFile("${builder.getYangName()}.yang") //<10>
----
<1> you can generate the <<yang>> with the script
<2> use `@Grab@ to download dependent jar files
<3> create new builder, default indent 2
<4> semicolon at the end is optional
<5> Groovy/Java keywords has to be quoted (or alias e.g. "import_" can be declared)
<6> Multiple line description
<7> the `yangroot` is ignored, can be used to add comment before module
<8> `geninfo` creates /* DO NOT EDIT .... */ comment
<9> call function and pass builder to split the <<yang>> generation into functions
<10> generate the <<yang>> and write it to the file

The result looks like

[source,groovy]
.Generated `acme-module.yang` file
----
/*
***** DO NOT EDIT THIS FILE! *****
This 'yang' file was generated with Groovy 'yangbuilder' (http://bitbucket.org/novakmi/yangbuilder)
Original file is acmeYang.groovy, generated on Tue Mar 17 23:48:37 CET 2015
Example implementation from yang tutorial http://www.yang-central.org/twiki/bin/view/Main/YangTutorials
*/
module acme-module {
  namespace "http://acme.example.com/module";
  prefix acme;

  import yang-types {
    prefix yang;
  }
  include acme-system;

  organization "ACME Inc.";
  contact joe@acme.example.com;
  description
    "The module for entities
     implementing the ACME products.";

  revision 2007-06-09 {
    description "Initial revision.";
  }

  leaf host-name {
    type string;
    mandatory true;
    config true;
    description "Hostname for this system";
  }
  leaf-list domain-search {
    type string;
    ordered-by user;
    description "List of domain names to search";
  }
}
----

===== variant with `groovy` closures

[source,groovy]
.acmeYangClrs.groovy - example of the <<yangbuilder>> script with `groovy` closures
----
#!/usr/bin/env groovy
@Grab(group = 'org.bitbucket.novakmi', module = 'nodebuilder', version = '1.0.0')
@Grab(group = 'org.bitbucket.novakmi', module = 'yangbuilder', version = '1.2.0')

//name of file to generate
moduleName = "acme-module-closure"   // do not use 'def' for script global variable

// define closures (not depending on builder object)
def makeModuleHeader = {
    header _ygn:true, { //any node with attribute '_ygn' is  ignored
        namespace "http://acme.example.com/module"; //semicolon at the end can present (yang style)
        prefix "acme" //or semicolon can be missing (more groovy like style)
        yngbuild ''  //yngbuild '' means new line without indentation

        'import' "yang-types", {
            //Groovy/Java keywords has to be quoted (or alias e.g. "import_" can be declared)
            prefix "yang"
        }
        include "acme-system"
        yngbuild ''

        organization 'ACME Inc.'
        contact 'joe@acme.example.com'
        // multiple line description
        description '''The module for entities
                       implementing the ACME products.'''

        yngbuild ''
        revision "2007-06-09", {
            description "Initial revision."
        }
        yngbuild ''
    }
}

def makeModule = { name ->
    module name, {
        delegate << makeModuleHeader

        leaf "host-name", {
            type "string"
            mandatory true
            config true
            description "Hostname for this system"
        }

        "leaf-list" "domain-search", {
            type "string"
            "ordered-by" "user"
            description "List of domain names to search"
        }
    }
}

/* if 'yangroot' is used as root node, its value is not echoed;
   use 'yangroot' e.g. if you need to add comments before 'module' or 'submodule'
   Otherwise use directly builder.module or builder.submodule
*/
def root = {
    yangroot {
        geninfo file: "acmeYang.groovy", time: true,
                cmt: "Example implementation from yang tutorial http://www.yang-central.org/twiki/bin/view/Main/YangTutorials"
        // one can continue with continue building yang from separate closure
        delegate << makeModule.curry(moduleName) //use curry to pass params to the closure <1> <2>
    }
}

//This script template represents example of usage without any plugin with closure reuse
def builder = new org.bitbucket.novakmi.yangbuilder.YangBuilder() //create new builder, default indent 2
builder << root // build closure <3>
builder.writeToFile("${builder.getYangName()}.yang")
----
<1> closures can have parameters, they are passed with `curry` function
<2> one can use other closures inside closure with `delegate << ...` (`delegate` is alias for `builder` object)
<3> closure does not need to know about `builder` object (`builder` can be created after closure or in different scope/file)


===== variant with the `CompactYangPlugin`

[source,groovy]
.acmeYangCompact.groovy - example of the <<yangbuilder>> script with `CompactYangPlugin`
----
#!/usr/bin/env groovy
@Grab(group = 'org.bitbucket.novakmi', module = 'nodebuilder', version = '1.0.0')
@Grab(group = 'org.bitbucket.novakmi', module = 'yangbuilder', version = '1.2.0')

def plugin = new CompactYangPlugin() // <1>
def builder = new org.bitbucket.novakmi.yangbuilder.YangBuilder(2, plugin)  // register
plugin.declareCommonAliasesAndQuotes()   // configure the plugin

moduleName = "acme-module" 

builder.yangroot {
    geninfo file: "acmeYang.groovy", time: true,
        cmt: "Example implementation from yang tutorial http://www.yang-central.org/twiki/bin/view/Main/YangTutorials"
        
    builder.module moduleName, {
        namespace "http://acme.example.com/module", nlLevel: true  //<2>      
        prefix "acme"
        
        import_ "yang-types", prefix: "yang" //<3>
        include "acme-system"

        organization 'ACME Inc.'
        contact 'joe@acme.example.com'
        
        description '''The module for entities
                       implementing the ACME products.'''

        revision "2007-06-09", description: "Initial revision."
        leaf "host-name", type: "string", mandatory: true, config: true, description: "Hostname for this system" //<4>
        
        leaf_list "domain-search", type: "string", ordered_by: "user", description: "List of domain names to search"        
    }
}

builder.writeToFile("${builder.getYangName()}.yang")
----
<1> instantiate, register and configure the `CompactYangPlugin`
<2> `nlLevel: true` automatically puts `\n` on this indent level
<3> the `CompactYangPlugin` uses `import_` as alias for the `import` keyword
<4> with the `CompactYangPlugin` many elements can be written as _one liners_, where child
    elements are attributes (separated with the `:`, e.g. `type: string`)


Generated <<yang>> file is same as the generated <<yang>> file without use of the `CompactYangPlugin`. As can be seen, the `CompactYangPlugin` reduces number of lines needed.

==== ietf-interfaces

This example is <<groovy>> source script that generates <<yang>> file in the RFC 7223.
The RFC <<yang>> files make use of lot of `descriptions`, which are not suitable for the reuse.
As you can see in examples below, there is still room to shorted the <<yang>> definition with use 
of the <<yangbuilder>>.

See sources and generated <<yang>> files in the `templates\scripts\ietf-interfaces` directory.

* `ietf-interfaces-1` - this <<yangbuilder>> script tries to be similar to the original <<yang>> file, it already uses the `CompactYangPlugin` to define some child elements as attributes
* `ietf-interfaces-2` - this <<yangbuilder>> script uses the `CompacYangPlugin` more "extensively", it defines all child elements as attributes to parent element. The semicolons and curly brackets are not used.
* `ietf-interfaces-3` - this <<yangbuilder>> script is similar to previous one  (`ietf-interfaces-2`). It shows possible splitting and reuse of parts of the script into closures and functions (e.g. repeated part of `description` text is made by defining new closure `stat_leaf`).

==== ietf-isis

This example is <<groovy>> source script that generates <<yang>> file based on the draft for ISIS common data model.
The original file can be found here: https://github.com/igp-yang/isis-yang/blob/master/ietf-isis.yang/.

This example illustrates how to make more advanced reuse when writing an <<yang>> datamodel. 
The reduction of lines needed (to maintain) is around 50%, while readability is still preserved.

* `ietf-isis-1` - this <<yangbuilder>> script tries to be similar to the original <<yang>> file, it already uses the `CompactYangPlugin` to define some child elements as attributes, the file
                  was converted from original (some parts were converted with use of regular expressions, search, replace, the other parts had to be converted manually)
* `ietf-isis-2` - this <<yangbuilder>> script uses the `CompactYangPlugin` more "extensively", it defines all child elements as attributes to parent element.
                   The semicolons and curly brackets are not used. Some elements were reordered (mainly `description` to use more compact <<yangbuilder>> features)

== Build in attributes

In the <<yangbuilder>>, each element can have following attributes:

* `indent` enable/disable indentation for the element (indentation is enabled by default)

[source,groovy]
---------
description
    '''test quotes
in multiline
description''', multiline: true, indent: true
---------
* `quotes` force to surround element value with quotes (with provided quotes character), even though quotes are not needed;
  see also <<quotes,special quotes handling>>.

[source,groovy]
---------
organization 'novakmi'
contact 'it.novakmi@gmail.com', quotes: '"'
---------

* `noAutoQuotes` do not add automatic quotes for element with <<quotes,special quotes handling>>

[source,java]
---------
description 'test quotes', noAutoQuotes: true
---------
WARNING: Element statements without quotes may lead to an invalid yang.

* +cmt+ add inline comment to the element, the comment is on the same line, see also <<cmt,cmt keyword>>

[source,groovy]
---------
container 'socket', cmt: "Inline comment for socket container"
---------

See `YangBuilderTest.groovy`, tests `quoteTest` and `commentTest` for other examples and corresponding <<yang>> result.

== Keywords

Some keywords have special meaning, when used with <<yangbuilder>>

=== `yngbuild`

This keyword echoes its value directly to the yang file. This is useful, if it is not possible to create content of the  <<yang>> file  
with regular builder syntax. The `yngbuild` keyword accepts optional attribute `indent`. If `indent` value evaluates to `true`, the elements
value is indented according to the current nesting level, otherwise no indentation is performed.

Example:

`builder.yngbuild "/* not indented comment */"`

`builder.yngbuild "/* indented comment */", indent:true`

NOTE: It is preferred to use `<<cmt,cmt keyword>>` keyword for comments, rather than `yngbuild` keyword

[[quotes]]
=== <<yang>> keywords with special handling for quotes
 
The value of following <<yang>> keywords will be automatically surrounded with quotes, if needed. This is done when string contains any space or tab characters, a semicolon (";"), 
braces ("{" or "}") or comment sequences ("//", "/*", or "*/"). 

Double quotes are preferred, if string already contains double quotes, single quotes are used. 

See <<RFC6020>> section.6.1.3.

* +namespace+
* +key+
* +pattern+
* +prefix+
* +reference+
* +contact+
* +description+
* +presence+
* +organization+

Example: 

`description "description of the model"`

[[cmt]]
=== `cmt` keyword

`cmt` keyword is similar to the `yngbuild` keyword. It is intended to simplify writing of the <<yang>> comments.

As default, one-line indented comment is produced:

`cmt "This is inline indented comment"` (default)

Other options are:

`cmt "This is inline, not indented comment", indent: false`

`cmt "This is non-inline indented comment", inline: false`

`cmt "This is non-inline comment", not indent: false, inline: false`

Inline comments have `//` as comment mark, non-inline comments use `/\*` and `*/` on separate lines.
Indented comments are indented according to the current indent (level of nesting).

See `YangBuilderTest.groovy`, test `commentTest` for examples and corresponding <<yang>> result.


== Plugins

Plugins can extend <<yangbuilder>> with additional functionality.  Plugin has to implement `NodeBuilderPlugin` abstract 
class interface (part of <<nodebuilder>>). 

Plugins are registered with `registerPlugin` method or they can be 
passed as second argument, when creating the builder (it is possible to pass one instance or list of plugin instances). 

Once the plugin know the builder to which it was registered (last registered).

Example:

[source, java]
---------
def builder = new YangBuilder(2, new CompactYangPlugin()) 
---------

Plugins, which are part of the <<yangbuilder>> distribution, are described in the next subsections.

=== CompactYangPlugin

This plugin allows to shorten <<yang>> syntax and write yang in more compact way.
In most cases, it allows to write sub-elements as attributes.

Example:

[source,groovy]
---------
leaf "node", type: string
---------

which is equivalent to

[source,java]
---------
leaf "node", {
  type string;
}
---------

See `CompactYangPlugin.groovy` for implementation and 
`CompactYangPluginTest.groovy` for more plugin usage and examples.

=== TailfCompactYangPlugin

This plugin is intended to support compact syntax for some publicly know Tail-f <<yang>> extensions (visit http://www.tail-f.com)

Currently it supports only `tailf:info` extension.

* `tailf:info` 
* `tailf:info-description` - which combines `tailf:info` and `description`

See `TailfCompactYangPluginTest.groovy` file for examples.


=== GroupingResolverPlugin

This plugin resolves all `groupings` within the builder and returns new `BuilderNode` which represents root of
the <<yang>> model, in which all `groupings` are expanded (resolved).

See `GroupingResolverPlugin` for example of plugin implementation and
`GroupingResolverPluginTest.groovy` for plugin usage examples.

== The <<groovy>> interface 

=== <<nodebuilder>> <<groovy>> interface

The <<yangbuilder>> inherits interface methods from the <<nodebuilder>>. 

==== <<nodebuilder>> builder interface

===== Methods from the `TreeNodeBuilder`

* `declareAlias` declare alias for keyword; e.g. can be used to declare aliases for  <<yang>> keywords, which are also <<groovy>> keywords 
* `reset` - reset the content of the builder (calls also `reset` on all registered plugins)
* `findNode` - return first `BuilderNode` with given name
* `getRootNode` - return `BuilderNode` reference to the root node

===== Methods from the `PluginTreeNodeBuilder`

* `registerPlugin`
* `unregisterPlugin`
* `getNumberOfRegisteredPlugins`

===== Methods from the `TextPluginTreeNodeBuilder`

* `getText` return textual representation of the <<yang>> data model
* `writeToFile` write textual representation of the <<yang>> data model to the file

[source,java]
---------
builder.declareAlias('import_', 'import') // declare 'import_' as alias  for 'import'
...
'import'('my-module1') //groovy keyword has to be surrounded with quotes
import_ 'my-module2' //or alias can be used
---------

===== Attributes from the `BuilderNode`

* `name`
* `parent`
* `attributes`
* `value`
* `children`

===== Methods from the `BuilderNode`

* `getNodePath`
* `shallowCopy`

===== Methods from the`NodeBuilderPlugin`

* `reset`
* `setMyBuilder`
* `getMyBuilder`

=== <<yangbuilder>> <<groovy>> interface

==== Methods from the `YangBuilder`

* `getYangName` returns the name of first `module` or `submodule` element
* `getPrefixName`
* `addQuoteKeywords`

[source,groovy]
---------
builder.getYangName()
---------

* `getPrefixName` returns the name of `prefix` of the first `module` or `submodule` (`belongs-to` prefix)

[source,groovy]
---------
builder.getPrefixName()
---------

See `YangBuilderTest.groovy` file (`src/test` directory), tests `yangNameTest`, `prefixNameTest` for examples of usage.


* `addQuoteKeywords` specify additional keywords for <<quotes,special quotes handling>>

[source,groovy]
---------
builder.addQuoteKeywords('my-annotation')
---------
