yangbuilder
===========
:Author:    Michal Nov√°k
:Email:     it.novakmi@gmail.com
:URL:       https://bitbucket.org/novakmi/yangbuilder
:Date:      2013-03-03
:Revision:  1.0.0

This document is written in http://www.methods.co.nz/asciidoc/[AsciiDoc] and is converted to the final format (html, pdf, etc.).

The document describes how to use Groovy builder for Yang data modeling language.

== Version history

[options="header"]
|======
| Version     | Notes          | Date        | Author
| 0.0.1       | Initial version| 2012-04-14  | {author}
| {revision}  | Updated        | {date}      | {author}
|======

== References

[bibliography]
* [[[yang]]] http://www.netconfcentral.org/yang_docs[YANG Data Modeling Language]
* [[[RFC6200]]] RFC for http://www.ietf.org/rfc/rfc6020.txt[YANG - A Data Modeling Language for the Network Configuration Protocol (NETCONF)]
* [[[groovy]]] http://groovy.codehaus.org/[Groovy - dynamic language for JAVA platform]
* [[[nodebuilder]]] https://bitbucket.org/novakmi/nodebuilder[Library for creation of groovy builders with plugin support]
* [[[yangbuilder]]] https://bitbucket.org/novakmi/yangbuilder[Groovy builder for YANG] - this document describes <<yangbuilder>>
* [[[pyang]]] http://code.google.com/p/pyang/ - Python <<yang>> parser, converter

== Terminology

* *Yang:* a Data Modeling Language for the Network Configuration Protocol (NETCONF), see <<RFC6200>>
* *Groovy builder:*  http://en.wikipedia.org/wiki/Design_Patterns[builder design pattern] implemented in <<groovy>>, with support for DSL,
  see http://groovy.codehaus.org/Builders[groovy builders]

== License

The <<yangbuilder>> is free software, licensed under http://en.wikipedia.org/wiki/MIT_License[MIT Licnense].

------------------
include::LICENSE.tmp[]
------------------

== Introduction

The <<yang>> modeling language is used to describe data model. It can be compared to the *XSD*, however, the syntax is different. 

Syntax of the data model written in the <<yang>> resembles syntax used in a Groovy builders. Groovy builder can be used to create parent-child oriented data documents 
like *XSD*, *XML* and <<yang>>.

Compare <<yang>>

.Yang example from Yang tutorial (shortened)
----
container timeout {                                             <1>
    leaf access-timeout {                                       <2>
        description "Maximum time without server response";
        type uint32;
    }
    leaf retry-timer {                                          <2>
        description "Period to retry operation";
        type uint32;
    }
}
----
<1> parent element
<2> child element with attributes (e.g. +type+ is attribute)

to 

.Groovy MarkupBuilder example from  http://groovy.codehaus.org/Creating+XML+using+Groovy%27s+MarkupBuilder[Creating XML] chapter
----
car(name:'HSV Maloo', make:'Holden', year:2006) {               <1>
    country('Australia')                                        <2>
    record(type:'speed', ' Truck with speed of 271kph')         <2>
}
----
<1> parent element (with attributes)
<2> child element with attributes (e.g. +type+, +value+)

NOTE: We are comparing similarity of the syntax, not the meaning. The <<yang>> example represents data model,
      the <<groovy>> example represents data model instance (XML with values).

NOTE: Because of the syntax similarity, in some Java IDEs (http://netbeans.org/index.html[NetBeans], http://www.jetbrains.com/idea/[Intellij IDEA], http://www.eclipse.org/[Eclipse]) 
      it is possible to use groovy mode to get limited editor support for the <<yang>> files (e.g syntax highlighting).

Groovy <<yangbuilder>> allows to create <<yang>> data models in <<groovy>> language with similar syntax to <<yang>>.

.Yang example from Yang tutorial (shortened) written in <<groovy>> yangbuilder
----
container('timeout') {                                             <1>
    leaf('access-timeout') {                                       <2>
        description "Maximum time without server response";
        type uint32;
    }
    leaf('retry-timer') {                                          <2>
        description "Period to retry operation";
        type uint32;
    }
}
----
<1> parent element
<2> child element with other child subelements (e.g. +type+)

As you can see, there is only little syntax difference between <<groovy>> and <<yang>>.

NOTE: The <<groovy>> syntax in the example above was written to be as much similar to the <<yang>> as possible. 
      The difference here is only brackets around element names (only those containing sub-elements) and apostrophes (or quotation marks).
      In <<groovy>> you can also omit semicolon. 

<<yangbuilder>> can use to generate <<yang>> file from <<groovy>> script (methods +getText+ or +writeToFile+). This has following pros and cons:

*Pros:*

* more advanced reuse (functions, closures, parametrization)
* use of programming language
* similar syntax to yang
* (groovy) support in IDE (navigation, syntax highlighting, formatting)
* plugins

*Cons:*

* additional step - yang file has to be generated
* yangbuilder does not support <<yang>> validation (one can use <<pyang>> for this)
* advanced reuse can lead to larger yang files (e.g. generating similar parts several times instead of using yang's +grouping+)

== History

There already existed a <<groovy>> yang builder as a part of one project I have worked for in my job (owned by customer). The implementation was
different. 

When I was implementing <<groovy>> builder for http://plantuml.sourceforge.net/[PlantUML] called https://bitbucket.org/novakmi/plantumlbuilder[plantumlbuilder],
I have decided to create common builder library <<nodebuilder>> with common support for <<groovy>> builders. After that, it was relatively easy to create  <<yangbuilder>> 
based on this common library. This <<yangbuilder>> implementation is new, free (see LICENSE) and supports plugins (provided by <<nodebuilder>> library).

=== Dependencies

* <<groovy>> 2.0.0 and newer has to be installed on the system (preferably with +GROOVY_HOME+ set and +$GROOVY_HOME/bin+ in the system +PATH+)
* +nodebuilder+ jar file (with +@Grab+ will be downloaded automatically)
* +yangbuilder+ jar file (with +@Grab+ will be downloaded automatically)

Note: <<nodebuilder>> and <<yangbuilder>> does not need to be downloaded, if <<groovy>> +@Grab+ can be used (PC is connected to Internet)

== Installation

In most cases, there is no need for special installation of <<yangbuilder>>. If you have installed <<groovy>> of version 2.0.0 or newer and Internet connection. 
The <<groovy>> script generating <<yang>> file downloads all required dependencies with use of <<groovy>> http://groovy.codehaus.org/Grape[Grape] feature. 
See +templates/scripts+ directory for example script. Usually, first run of the script takes some time (downloading dependencies). During next run no dependencies are 
downloaded and Internet connection is not  needed anymore.

It is also possible to run script or <<groovy>> application in regular way by supplying +classpath+ to the dependent +jar+ files.

////
TBD footnoteref:[future, This section will be updated in the future to provide more information.]
////

== Using yangbuilder

See +templates/scripts+ directory to see how to write <<yangbuilder>> scripts and generate yang files.
See +templates/project+ directory for sample project that generates several (related) yang files.

=== Example 1

////
Syntax highlighting requires source-highlight package (Ubuntu).
java is used as it is close to groovy syntax
////
.Example groovy script to generate <<Yang>> file based on example from Instant YANG tutorial
[source,java]
-----------
#!/usr/bin/env groovy                                                                                  //<1>
include::acmeYang.tmp[]
-----------
<1> On Unix (Linux) you can run script to generate <<yang>> file as any other executable script +./<scriptName>.groovy+, 
provided <<groovy>> is installed and exec attribute of the script file is set. Alternatively (or on Windows) you can run it 
as +groovy <scriptname>.groovy+.
include::acmeYang-callout.tmp[]

[source,java]
.Resulting <<yang>> file
-----------
include::acme-module.tmp[]
-----------
include::acme-module-callout.tmp[]
TBD footnoteref:[future]

=== Example 2

.Example groovy script to generate more complex <<Yang>> file
[source,java]
-----------
#!/usr/bin/env groovy
include::exampleYang.tmp[]
-----------
include::exampleYang-callout.tmp[]
[source,java]
.Resulting <<yang>> file
-----------
include::example-module.tmp[]
-----------
include::example-module-callout.tmp[]

////
TBD footnoteref:[future]
////

=== <<yangbuilder>> interface methods

<<yangbuilder>> inherits interface methods from <<nodebuilder>>. 
Most notable  <<nodebuilder>> (often used when working with <<yangbuilder>>) methods are:

* +declareAlias+ declare alias for keyword, can be used to declare aliases for <<yang>> keywords, which are also <<groovy>> keywords

[source,java]
---------
builder.declareAlias('import_', 'import') // declare 'import' keyword alias 'import_'
builder.'import'('my-module1') //groovy keyword has to be surrounded with quoutes
builder.import_('my-module2') //or alias can be used
---------

* +getText+ return <<yang>> representation of data model
* +writeToFile+ write <<yang>> representation of data model to the file

Following interface methods are added by <<yangbuilder> itself.

* +getYangName+ returns name of first +module+ or +submodule+

[source,java]
---------
builder.getYangName()
---------

* +getPrefixName+ returns name of +prefix+ of first +module+ or +submodule+ (+belongs-to+ prefix)

[source,java]
---------
builder.getPrefixName()
---------

See +YangBuilderTest.groovy+, test +yangNameTest+ test +prefixNameTest+ for examples of usage.

* +addQuoteKeywords+ specify addtional keywords for <<quotes,special quotes handling>>

[source,java]
---------
builder.addQuoteKeywords('my-annotation')
---------

=== Build in attributes

* +multiline+ format statement value on several lines 

[source,java]
---------
description('''The module for entities
implementing the ACME products.''', multiline: true)
---------

is expanded to:

[source,java]
---------
description
   "The module for entities
    implementing the ACME products.";
---------

* +indent+ enable/disable indentation for the statement (indentation is enabled by default, unless +multiline+ attribute is used)

[source,java]
---------
description(
    '''test quotes
in multiline
description''', multiline: true, indent: true)
---------
* +quotes+ force to surrounding statement value with quotes (provide quotes character), even though quotes are not needed.
  See also <<quotes,special quotes handling>>

[source,java]
---------
organization 'novakmi'
contact('it.novakmi@gmail.com', quotes: '"')
---------

* +noAutoQuotes+ do not add automatic quotes for keyword with <<quotes,special quotes handling>>

[source,java]
---------
description('test quotes', noAutoQuotes: true)
---------
WARNING: Statements without quotes may lead to invalid yang.

* +cmt+ add inline comment to the statement, see also <<cmt,cmt keyword>>

[source,java]
---------
container('socket', cmt: "Inline comment for socket container")
---------

See +YangBuilderTest.groovy+, test +quoteTest+ test +commentTest+ for other examples and corresponding <<yang>> result.

=== Keywords

==== +yngbuild+ keyword

This keyword echoes it's value directly to the yang file. This is useful if it is not possible to create content of the  <<yang>> file  
with regular builder syntax. The +yngbuild+ keyword accepts optional attribute +indent+. If its value evaluates to +true+, the elements 
value is indented according to the current nesting level.

Example:

+builder.yngbuild("/* not indented comment */")+
+builder.yngbuild("/* indented comment */", indent:true)+

NOTE: It is preferred to use +cmt+ keyword for comments, rather than +yngbuild+ keyword

[[quotes]]
==== <<yang>> keywords with special handling for quotes
 
The value of following <<yang>> keywords will be automatically surrounded with quotes if needed (string contains any space or tab characters, a semicolon (";"), 
braces ("{" or "}") or comment sequences ("//", "/*", or "*/"). Double quotes are preferred, if string already contains double quotes, single quotes are used. 

(See  <<RFC6200>> section.6.1.3)

* +namespace+
* +key+
* +pattern+
* +prefix+
* +reference+
* +contact+
* +description+
* +presence+
* +organization+

Example: 

+prefix "example"+

[[cmt]]
==== +cmt+ keyword

+cmt+ keyword is similar to +yngbuild+ keyword. It is intended to simplify writing of comments.

As default, it produces one line indented comment.

+cmt('This is inline indented comment')+ (default)
+cmt('This is inline, not indented comment', indent: false)+
+cmt('This is non-inline indented comment', inline: false)+
+cmt('This is non-inline comment', not indent: false, inline: false)+

Inline comments have +//+ as comment mark, non-inline comments use +/*+ and +*/+ on separate lines.
Indented comments are indented according to current indent (level of nesting). This also applies for
non-inline comments.

See +YangBuilderTest.groovy+, test +commentTest+ for examples and corresponding <<yang>> result.


== Plugins

Plugins can extend <<yangbuilder>> with additional functionality.  Plugin has to implement +NodeBuilderPlugin+ abstract 
class interface (part of <<nodebuilder>>). 

Plugins are registered with +registerPlugin+ method or they can be 
passed as second argument, when creating the builder (possible to pass one instance list of plugin instances). 

Example:

[source,java]
---------
def builder = new YangBuilder(2, new CompactYangPlugin()) 
---------

Plugins, which are part of the <<yangbuilder>> distribution, are described in the next subsections.

=== CompactYangPlugin

This plugin allows to shorten <<yang>> syntax and write yang in more compact way.
In most cases it allows to write sub-elements as attributes.

Example:

[source,java]
---------
leaf('node', type: string)
---------

which is equivalent to

[source,java]
---------
leaf('node') {
  type string;
}
---------

.Example groovy script to generate more complex <<Yang>> file with +CompactYangPlugin+
[source,java]
-----------
include::exampleCompactYang.tmp[]
-----------
include::exampleCompactYang-callout.tmp[]

////
 syntax table
////


See +CompactYangPlugin.groovy+ for implementation and 
+CompactYangPluginTest.groovy+ for another plugin usage examples.


=== GroupingResolverPlugin

This pugins resolves all +groupings+ within the builder and returns new +BuilderNode+ which represents root of
<<yang>> tree, where +groupings+ are resolved. 

See +GroupingResolverPlugin+ (plugin allowing resolving of groupings) for example of plugin implementation and
+GroupingResolverPluginTest.groovy+ for plugin usage example.
