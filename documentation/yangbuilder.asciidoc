yangbuilder
===========
:Author:    Michal Nov√°k
:Email:     bubbles.way@gmail.com
:URL:       https://bitbucket.org/bubbles.way/yangbuilder
:Date:      2012-04-13
:Revision:  0.0.1

This document is written in http://www.methods.co.nz/asciidoc/[AsciiDoc] and converted to the desired format (html, pdf, etc.) 

== Version history

[options="header"]
|======
| Version     | Notes          | Date    | Author
| {revision}  | Initial version| {date}  | {author}
|======

== References

[bibliography]
* [[[yang]]] http://www.yang-central.org[YANG - A Data Modeling Language for the Network Configuration Protocol (NETCONF)]
* [[[RFC6200]]] RFC for http://www.yang-central.org/twiki/pub/Main/YangDocuments/rfc6020.html[YANG - A Data Modeling Language for the Network Configuration Protocol (NETCONF)]
* [[[groovy]]] http://groovy.codehaus.org/[Groovy - dynamic language for JAVA platform]
* [[[nodebuilder]]] https://bitbucket.org/bubbles.way/nodebuilder[Library for creation of groovy builders with plugin support]
* [[[yangbuilder]]] https://bitbucket.org/bubbles.way/yangbuilder[Groovy builder for YANG] - this document describes <<yangbuilder>>
* [[[pyang]]] http://code.google.com/p/pyang/

== Terminology

* *Yang:*  a Data Modeling Language for the Network Configuration Protocol (NETCONF), see <<RFC6200>>
* *Groovy builder:*  http://en.wikipedia.org/wiki/Design_Patterns[builder design pattern] implemented in <<groovy>>, with support for DSL,
  see http://groovy.codehaus.org/Builders[groovy builders]

== Introduction

The [[[yang]]] modeling language is used to describe data model of the configuration. In this way it can be compared to the *XSD*, however the syntax is
rather different (more similar *JSON*). 

Syntax of the data model written in the <<yang>> resembles syntax used in a Groovy builders. Groovy builders can be used to create
parent-child oriented data documents like *XML* and thus also <<yang>>.

Compare 

.Yang example from http://www.yang-central.org/twiki/bin/view/Main/YangTutorials[Yang tutorial] (shortened)
----
container timeout {                                             <1>
    leaf access-timeout {                                       <2>
        description "Maximum time without server response";
        type uint32;
    }
    leaf retry-timer {                                          <2>
        description "Period to retry operation";
        type uint32;
    }
}
----
<1> structure parent element
<2> structure member - child element with attributes (e.g. +type+)

to 

.Groovy MarkupBuilder example from  http://groovy.codehaus.org/Creating+XML+using+Groovy%27s+MarkupBuilder[Creating XML] chapter
----
car(name:'HSV Maloo', make:'Holden', year:2006) {               <1>
    country('Australia')                                        <2>
    record(type:'speed', ' Truck with speed of 271kph')         <2>
}
----
<1> structure parent element
<2> structure member - child element with attributes (e.g. +type+, +value+)

NOTE: Here we are comparing similarity of the syntax, not the meaning. The <<yang>> example represents data model,
      the <<groovy>> example represents data model instance (XML with values). With <<groovy>> one can also build *XSD*
      in a same way like *XML*. With *XSD* the meaning would be the same.

NOTE: Because of the syntax similarity, in some Java IDEs (http://netbeans.org/index.html[NetBeans], http://www.jetbrains.com/idea/[Intellij IDEA], http://www.eclipse.org/[Eclipse]) 
      it is possible to use groovy mode to get limited editor support for the <<yang>> files (e.g syntax highlighting) out of the box.

Groovy <<yangbuilder>> allows to create <<yang>> data models with similar syntax as <<yang>>. 

.Yang example from http://www.yang-central.org/twiki/bin/view/Main/YangTutorials[Yang tutorial] (shortened) written in <<groovy>> yangbuilder
----
container('timeout') {                                             <1>
    leaf('access-timeout') {                                       <2>
        description "Maximum time without server response";
        type uint32;
    }
    leaf('retry-timer') {                                          <2>
        description "Period to retry operation";
        type uint32;
    }
}
----
<1> structure parent element
<2> structure member - child element with attributes (e.g. +type+)

As you can see, there is only little syntax difference between <<groovy>> and <<yang>>.
NOTE: <<groovy>> syntax in example above was written to be much similar to <<yang>> as possible. The only difference is brackets around element 
      names containing child elements and apostrophes (or quotation marks). In <<groovy>> you can also omit semicolon. 

With yangbuilder one can use groovy script to generate <<yang>> file. This approach has following pros and cons:

*Pros:*

* more advance reuse (functions, closures, parametrization)
* use of programming language
* similar syntax to yang
* (groovy) support in IDE (navigation, syntax highlighting, formatting)
* plugins

*Cons:*

* additional step - yang file has to be generated
* yangbuilder does not support yang validation (use <<pyang>>)
* advanced reuse can lead to bigger yang files (e.g. generate similar parts several times instead of using yang's +grouping+)

== History

There already existed a <<groovy>> as a part o one project I have worked for in my job (owned by customer).

When I was implementing <<groovy>> builder for http://plantuml.sourceforge.net/[PlantUML] called https://bitbucket.org/bubbles.way/plantumlbuilder[plantumlbuilder],
I have decided to create common builder library <<nodebuilder>> with common support for <<groovy>> builders using
parent-child processing. Than it was relatively easy to base new <<yangbuilder>> on this common library. New <<yangbuilder>> implementation is
completely new, free and supports plugins (provided by <<nodebuilder>>).


=== Dependencies

* <<groovy>> 1.8.0 and newer has to be installed on the system (preferably with +GROOVY_HOME+ set and +$GROOVY_HOME/bin+ in system +PATH+)
* +nodebuilder+ jar file,
* +yangbuilder+ jar file

Note: <<nodebuilder>> and <<yangbuilder>> does not need to be downloaded, if  if <<groovy>> +@Grab+ can be used (PC is connected to Internet)


== Installation

In most cases, there is no need for installation. If you have installed <<groovy>> of version 1.8.0 or newer and Internet connection, the script generating <<yang>> file 
downloads all required dependencies with use of <<groovy>> http://groovy.codehaus.org/Grape[Grape] feature. See +templates/scripts+ directory for example script.
Usually, first run of the script takes some time (downloading dependencies). During second run no dependencies are downloade and Internet connection is not 
needed anymore.

It is also possible to run script or application in regular <<groovy>> way by supplying +classpath+ to the dependent +jar+ files.

TBD footnoteref:[future, This section will be updated in the future to provide more information.]

== Using yangbuilder

See +templates/scripts+ directory to see how write <<yangbuilder>> scripts and generate yang files.
See +templates/project+ directory for sample project that generates several (related) yang files.

=== Example 1

////
Syntax highlighting requires source-highlight package (Ubuntu).
java is used as it is close to groovy syntax
////
.Example groovy script to generate <<Yang>> file based on example from Instant YANG tutorial, section modules
[source,java]
-----------
#!/usr/bin/env groovy                                                                                 //<1>
//Update nodebuilder, yangbuilder version numbers as needed
@GrabResolver(name = 'bubbleswayrepo', 
            root = 'https://github.com/bubblesway/bubbleswayrepo/raw/master/releases',
            m2compatible = true)                                                                      //<2>
@Grab(group = 'org.bitbucket.novakmi', module = 'nodebuilder', version = '0.4.0')
@Grab(group = 'org.bitbucket.novakmi', module = 'yangbuilder', version = '0.2.0')

// This script template represents example of usage without any plugin
def builder = new org.bitbucket.novakmi.yangbuilder.YangBuilder() // create new builder, default indent of 2

//name of file to generate
moduleName = "acme-module"   // do not use 'def' for script global variable

def makeModule(builder) {                                                                              //<3> 
        builder.module(moduleName) {
                //'yngbuild' echoes its value + request indentation
                yngbuild('// based on example from Instant YANG tutorial, section modules', indent:true) 
                namespace "http://acme.example.com/module"; // semicolon at the end present (yang style)
                prefix "acme" // or semicolon can be missing (more groovy like style)
                yngbuild('')  //yngbuild('') means new line without indentation

                // Groovy/Java keywords has to be quoted; if node has sub nodes, value has to be in brackets
                'import'("yang-types") { 
                        prefix "yang"
                }
                include "acme-system" // if node does not have sub nodes, brackets are optional
                yngbuild('')

                organization 'ACME Inc.'
                contact 'joe@acme.example.com'
                description('''The module for entities
implementing the ACME products.''', multiline: true) // multiple line description
                yngbuild('')

                revision('2007-06-09') {
                        description "Initial revision."
                }
                yngbuild('')
        }
}

/* if 'yangroot' is used as root node, its value is not echoed;
   use 'yangroot' e.g. if you need to add comments before 'module' or 'submodule'
   Otherwise use directly builder.module or builder.submodule
*/
builder.yangroot {                                                                                    //<4>
        yngbuild("/* This yang file was generated with groovy YangBuilder on ${new Date().toString()}")
        yngbuild('   see http://bitbucket.org/bubbles.way/yangbuilder */')
        // one can continue with  module(moduleName) ... or build  yang in separate function
        // (another option is to define closure after builder.yangroot { ...)
        makeModule(builder)
}

builder.writeToFile("${builder.getYangName()}.yang")                                                  //<5>
-----------

<1> On Unix (Linux) you can run script to generate <<yang>> file as any other executable script +./<scriptName>.groovy+, 
provided <<groovy>> is installed and exec attribute is set. Alternatively (or on Windows) you can run it as +groovy <scriptname>.groovy>+.
<2> With Internet connection, use groovy <<Groovy>> +Grab+ to get dependencies automatically (may take some time for the first time to download jars)
Without Internet connection you need to specify <<nodebuilder>> and <<yangbuilder>. jars on classpath.
E.g. +groovy -cp ./nodebuilder-0.4.0.jar:yangbuilder-0.2.0.jar <scriptname>.groovy>+.  
<3>  function that makes main <<yang>> module
<4> script entry point, normally we would start with +builder.module(moduleName)+, but since we want to add some comments before module, we start
with +yangroot+ ant then continue with +ynngbuild+ (echoing commands)
<5> with function +getYangName+ builder returns name of +module+ or +submodule+ node, which we can use to get <<yang>> file name (we could also used
+uilder.writeToFile("${moduleName}.yang")+ or builder.writeToFile("acme-module.yang"), but this is general for all scripts. 


[source,java]
.Resulting <<yang>> file
-----------
/* This yang file was generated with groovy YangBuilder on Wed Apr 04 22:53:44 CEST 2012
   see http://bitbucket.org/bubbles.way/yangbuilder */
module acme-module {
  // based on example from Instant YANG tutorial, section modules
  namespace "http://acme.example.com/module";
  prefix acme;

  import yang-types {
    prefix yang;
  }
  include acme-system;

  organization "ACME Inc.";
  contact joe@acme.example.com;
  description
   "The module for entities
    implementing the ACME products.";

  revision 2007-06-09 {
    description "Initial revision.";
  }

}
-----------
TBD footnoteref:[future]

== Plugins

Plugins can extend +yangbuilder+ with additional functionality. See +CompactYangPlugin.groovy+ (plugin allowing shorter syntax) for example of plugin implementation and 
+CompactYangPluginTest.groovy+ for plugin usage example.

TBD footnoteref:[future]

////
== Implementation

=== Builder 
TBD

=== Plugins

TBD

=== Tests

TBD
////
