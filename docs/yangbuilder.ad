yangbuilder
===========
:Author:    Michal Nov√°k
:Email:     it.novakmi@gmail.com
:URL:       https://bitbucket.org/novakmi/yangbuilder
:Date:      2017-06-02
:Revision:  1.3.0

This  document describes how to use Groovy builder for the Yang data modeling language.
The document is written in the http://www.methods.co.nz/asciidoc/[AsciiDoc].

== Version history

[options="header"]
|======
| Version     | Notes          | Date        | Author
| 0.0.1       | Initial version| 2012-04-14  | {author}
| 1.0.0       | Updated        | 2013-03-08  | {author}
| 1.1.0       | Updated        | 2015-04-10  | {author}
| 1.2.0       | Updated        | 2016-12-12  | {author}
| {revision}  | Updated        | {date}      | {author}
|======

== References

[bibliography]
* [[[yang]]] http://www.netconfcentral.org/yang_docs[YANG Data Modeling Language]
* [[[RFC6020]]] RFC for http://www.ietf.org/rfc/rfc6020.txt[YANG - A Data Modeling Language
  for the Network Configuration Protocol (NETCONF)]
* [[[groovy]]] http://groovy-lang.org/[Groovy - a dynamic language for JAVA platform]
* [[[nodebuilder]]] https://bitbucket.org/novakmi/nodebuilder[Library for creation of groovy builders with plugin support]
* [[[yangbuilder]]] https://bitbucket.org/novakmi/yangbuilder[Groovy builder for YANG] - described in this document
* [[[pyang]]] https://github.com/mbj4668/pyang - Python <<yang>> parser, converter

== Terminology

* *Yang:* a Data Modeling Language for the Network Configuration Protocol (NETCONF), see <<RFC6020>>
* *Groovy builder:*  http://en.wikipedia.org/wiki/Design_Patterns[builder design pattern] implemented in the <<groovy>>, 
  with support for DSL (Domain Specific Language). See http://groovy-lang.org/dsls.html#_builders[groovy builders] page.

== License

The <<yangbuilder>> is free software, licensed under http://en.wikipedia.org/wiki/MIT_License[MIT License].

----
include::../LICENSE[]
----

== Introduction

NOTE: _This document is work in progress and some information may not be always up to date.
       Please take a look at the examples (in the `examples\scripts` directory)
       and at the tests (in the `tests\groovy` directory] to see full usage of all <<yangbuilder>>
       features._

The <<yang>> is used to describe data models. It can be compared to the *XML Schema* (*XSD*),
however the syntax is different.

The <<groovy>> builder can be used to create parent-child oriented data documents
(e.g. *XSD*, *XML*). See, for example http://groovy-lang.org/processing-xml.html#_creating_xml[creating XML] chapter
how to use <<groovy>> builder for *XML*.

If you look into publicly available <<yang>> data models
(e.g. https://github.com/openconfig/public[openconfig] or
https://github.com/mbj4668/pyang/tree/master/modules/ietf[ietf]), you may notice similar parts
(sometimes large), which cannot be "reused" in the <<yang>>.  Typical example are almost
identical parts for `IPv4` and `IPv6`, for `OSPF v2` and `OSPF v3`, etc.

With Groovy builder for the <<yang>> modeling language one can generated data models with power of
programming language and achieve better reuse and data model maintenance
(see <<proscons, pros and cons>> section).

The <<yang>> syntax resembles syntax used in the <<groovy>> builders.
This gives good reason to implement <<groovy>> builder for the <<yang>>.

=== Example of the <<yang>> data model

.Yang example from the Yang tutorial (shortened)
[source, groovy]
----
container timeout {                                             <1>
    leaf access-timeout {                                       <2>
        description "Maximum time without server response";
        type uint32;
    }
    leaf retry-timer {
        description "Period to retry operation";
        type uint32;
    }
}
----
<1> parent element
<2> child element with sub-elements/attributes (e.g. +type+ is sub-element/attribute)

=== Example of the groovy <<yangbuilder>> data model

.Yang example from the Yang tutorial (shortened) written in the <<groovy>> yangbuilder
[source, groovy]
----
container "timeout", {                                             <1>
    leaf "access-timeout", {                                       <2>
        description "Maximum time without server response";        <3>
        type uint32;
    }
    leaf "retry-timer",  {                                         
        description "Period to retry operation";
        type uint32;
    }
}
----
<1> parent element
<2> child element with other child sub-elements (e.g. `type`)
<3> all semicolons `;` are optional

There is only little syntax difference between the <<groovy>> and the <<yang>> version.

NOTE: The <<groovy>> syntax in the example above was written to be similar to the <<yang>>.
      The difference are the commas (`,`) after element name (needed for elements containing sub-elements)
      and quotation marks (apostrophes can be used as well). +
      The comma `,` can be replaced by parentheses, e.g. `leaf("access-timeout)`.
      Semicolons are optional. If you need to use element, that is keyword or
      is forbidden in <<groovy>>/Java, it has to be writen as string, e.g. `"enum" "one"`,
      `"leaf-list" "numbers"` (or you can define alias with <<compactPlugin,`CompactYangPlugin`>>).

=== Example of the groovy <<yangbuilder>> data model with compact syntax

With the <<compactPlugin,`CompactYangPlugin`>> for the <<yangbuilder>>, one can use compact syntax to reduce
the level of nesting.

.Yang example from the Yang tutorial (shortened) written in the <<groovy>> <<yangbuilder>> compact syntax
----
container "timeout", {                                             
    leaf "access-timeout", type: uint32,
         description: "Maximum time without server response"  <1>
    leaf "retry-timer", type: uint32,
         description: "Period to retry operation"
}
----
<1> Simple child elements (not having sub elements) can be written as attributes (not part
    of <<yang>>).
    The attribute name and value is separated with colon (`:`), the attributes
    are separated by comma (`,`).

NOTE: The compact syntax can be used only if <<compactPlugin,`CompactYangPlugin`>> is registered.

[[proscons]]
=== Pros and Cons

*Pros:*

* output is the `yang` file (no compatibility issues)
* syntax similar to the `yang` syntax
* better reuse than in the <<yang>>
    ** use of programming language (loops, functions, closures, variables, conditions, etc.)
    ** parametrization (e.g. `grouping ipv4 {`
       and `grouping ipv6 {` can be written as `grouping ${ipver} {`)
    ** use variables for values (no magic numbers, strings)
    ** optionally extend syntax with closures (e.g. add `leaf_string`)
    ** `groovy` reuse (closures, functions, etc.) as alternative option to the `yang`
        reuse (`grouping`, `augment`, `refine`)
* generate the <<yang>> data models conditionally
   ** maintain and support different versions of (similar) data models
   ** generate different release, product, feature or customer specific <<yang>> versions according
      to the build options or environment variables
   ** use `if` conditions where it is not possible to use in the <<yang>>
      (e.g `if-feature`  in `import`, `include`, ...)
   ** use negative conditions (not possible with `if-feature`)
* split common parts into several functions/closures or files
* reduce number of lines to maintain (mainly with the `CompactYangPlugin`)
* extend with plugins (e.g. add own aplication code generators)
* use power of IDE supporting `groovy` (e.g.  Intellij Idea Community edition)
    * auto completion
    * syntax highlighting
    * formatting
    * syntax checking

*Cons:*

* additional step - the <<yang>> file has to be generated from
  the <<groovy>> script or application
* <<yangbuilder>> does not support <<yang>> syntax validation
  (use <<pyang>> or other yang compiler)
* basic knowledge of <<groovy>> and Java (<<groovy>> extends Java) is required
* knowledge of <<groovy>> runtime error massages is required when troubleshooting
* can take some time to learn new (although similar) syntax
 
=== Dependencies

* <<groovy>> 2.4.0 and newer has to be installed in the system
  (preferably with `GROOVY_HOME` set and `$GROOVY_HOME/bin` in the the system `PATH`)
* `nodebuilder` jar file
* `yangbuilder` jar file

NOTE: <<nodebuilder>> and <<yangbuilder>> jar files do not need to be downloaded
      if <<groovy>> `@Grab` can be used.

=== Installation

In most cases, there is no need for installation of the <<yangbuilder>>, when there is an
Internet connection. The <<groovy>> script generating the <<yang>> file can download all required
dependencies with the use of groovy http://docs.groovy-lang.org/latest/html/documentation/grape.html[Grape]
feature. See +examples/scripts+ directory for example scripts.

[source,groovy]
.<<groovy>> Grape lines
----
#!/usr/bin/env groovy
@Grab(group = 'org.bitbucket.novakmi', module = 'nodebuilder', version = '1.1.0')
@Grab(group = 'org.bitbucket.novakmi', module = 'yangbuilder', version = '1.3.0')
----

The script can be run with command `groovy <scriptname>.groovy`. +
On Linux, it can be also run as regular script (`./<scriptname>.groovy`).

The first run of the script can take some time (downloading dependencies from the Internet).
During the next run, the dependencies are already downloaded and the Internet
connection is not needed anymore.

The datamodel "building" can be split into several files (see example in `examples/project`
directory).

It is possible to run script or <<groovy>> application in regular <<groovy>> (Java)
way by supplying `classpath` to the dependent `jar` files.
For this case the `@Grab` statements should be removed and the corresponding
dependencies have to be placed into the `CLASSPATH`.

For example:

[source,bash]
----
groovy -cp nodebuilder.jar:yangbuilder.jar my-yang-model.groovy
----

The <<yangbuilder>> can be also used in `gradle`. The `gradle` dependencies look like:

[source, groovy]
.`gradle` dependencies
----
dependencies {
    compile localGroovy()
    compile group: 'org.bitbucket.novakmi', name: 'nodebuilder', version: '1.1.0'
    compile group: 'org.bitbucket.novakmi', name: 'yangbuilder', version: '1.3.0'
}
----

== Examples

The examples represents good way to learn how to use the
<<yangbuilder>>. They can be easily run and generated <<yang>> data model compared with
the <<yangbuilder>> data model.

See  `examples/scripts` to find out how to write <<yangbuilder>> scripts
and generate the `yang` files.
See `examples/project` for sample project (application) that generates several (related) yang
files.


=== acmeYang

This example is represented by the several variants of the <<groovy>> source scripts that generate
<<yang>> data model (adopted from the Yang tutorial
http://www.yang-central.org/twiki/bin/view/Main/YangTutorials). Each variant generates same <<yang>>
data model and shows different ways how to use the <<yangbuilder>>.

See directory `examples\scripts\acme`.

====  Plain variant

[source,groovy]
.`acmeYangPlain.groovy` - the <<yangbuilder>> script
----
#!/usr/bin/env groovy                                                              <1>
@Grab(group = 'org.bitbucket.novakmi', module = 'nodebuilder', version = '1.1.0')  <2>
@Grab(group = 'org.bitbucket.novakmi', module = 'yangbuilder', version = '1.2.1')

def builder = new org.bitbucket.novakmi.yangbuilder.YangBuilder()                  <3>
moduleName = "acme-module-plain" //name of file to generate

builder.yangroot {
    geninfo file: "acmeYang.groovy", time: true,
        cmt: '''Example implementation from yang tutorial
                http://www.yang-central.org/twiki/bin/view/Main/YangTutorials'''

    module moduleName, {
        namespace "http://acme.example.com/module";                                <4>
        prefix "acme"
        yngbuild ''   //yngbuild '' means new line without indentation
                                                                                   <5>
        'import' "yang-types", {
            prefix "yang"
        }
        include "acme-system"
        yngbuild ''

        organization 'ACME Inc.'
        contact 'joe@acme.example.com'
        // multiple line description                                               <6>
        description '''The module for entities
                       implementing the ACME products.'''

        yngbuild ''
        revision "2007-06-09", {
            description "Initial revision."
        }
        yngbuild ''

        leaf "host-name", {
            type "string"
            mandatory true
            config true
            description "Hostname for this system"
        }

        "leaf-list" "domain-search", {
            type "string"
            "ordered-by" "user"
            description "List of domain names to search"
        }
    }
}

builder.writeToFile("${builder.getYangName()}.yang")                               <7>
----
<1> you can generate the <<yang>> by executing  the script (Linux)
<2> use `@Grab` to download dependent jar files, if not yet downloaded
<3> create new builder (with default indent 2)
<4> semicolon at the end is optional
<5> Groovy/Java keywords has to be quoted
<6> Multiple line description
<7> generate the <<yang>> and write it to the file

[source,groovy]
.Generated `acme-module-plain.yang` file
----
/*
***** DO NOT EDIT THIS FILE! *****
This 'yang' file was generated with Groovy 'yangbuilder'
(http://bitbucket.org/novakmi/yangbuilder)
Original file is acmeYang.groovy
Generated on Mon May 15 23:15:57 CEST 2017
Example implementation from yang tutorial
http://www.yang-central.org/twiki/bin/view/Main/YangTutorials
*/
module acme-module-plain {
  namespace "http://acme.example.com/module";
  prefix acme;

  import yang-types {
    prefix yang;
  }
  include acme-system;

  organization "ACME Inc.";
  contact joe@acme.example.com;
  description
    "The module for entities
     implementing the ACME products.";

  revision 2007-06-09 {
    description "Initial revision.";
  }

  leaf host-name {
    type string;
    mandatory true;
    config true;
    description "Hostname for this system";
  }
  leaf-list domain-search {
    type string;
    ordered-by user;
    description "List of domain names to search";
  }
}
----

==== Other variants

In the same directory you can find other variants:

* `acmeYangFun.groovy` - shows how data model in <<groovy>> script can be
   split into more functions. Each function takes `builder` object as parameter
   so it can continue building the data model.
* `acmeYangClrs.groovy` - shows how data model in <<groovy>> script can be
   split into more closures. Overloaded left shift operator `<<` can be used.
   Instead of passing the `builder` object, the `delegate` can be used.
   Closures can have parameters and they can be passed with `curry` feature.
   If the `builder` is in the closure scope, then `delegate <<` can be skipped
   completely and parameters can be passed without `curry`.
* `acmeYangCompact.groovy` - shows the use of `CompactYangPlugin` which allows more
   compact data model representation than the original `yang`. Simple
   sub-elements (those not having children) can be written as attributes.

=== IETF examples

A few `IETF` standard yang data models have been converted to the <<yangbuilder>>.

The RFC <<yang>> files make use of lot of `descriptions`, which are not suitable for
the reuse. As you can see in the examples, there is still room to
shorted the <<yang>> definition with use of the <<yangbuilder>>.

The examples are found in the `examples\scripts\ietf` directory.

==== `ietf-routing` data model

This is the latest example with output almost identical to the original data models
(the differences are often minor fixes to the original yang files found by <<yangbuilder>> reuse).

The script file `ietf-routing.groovy` generates all `ietf-routing` data models.
The `IPv4` and `IPv6` variant share common code and represent good example for reuse based
on the parameter. Each IETF file is created by one closure in the loop at the end.

[source,groovy]
.`ietf-routing.groovy` - generate several files in loop
----
[                                                           <1>
    ietf_routing_yang,
    ietf_ipvx_unicast_routing.curry(4),
    ietf_ipvx_unicast_routing.curry(6),
    ietf_ipv6_router_advertisements,
].each {it ->                                               <2>
    builder.reset()                                         <3>
    builder << it                                           <4>
    builder.writeToFile("${builder.getYangName()}.yang")    <5>
}
----
<1> list of closures (some of them reused with curried parameter)
<2> list iteration
<3> reset builder content (not configuration in  <<configMap, `configMap`>>)
<4> build data model according to the current closure
<5> save the `yang` file

The example illustrates usage of the <<compactPlugin,`CompactYangPlugin`>>
and most of the data model is written in (so called) compact `yang` syntax.

Run with `./ietf-routing.groovy`

Interesting parts of the script

[source,groovy]
.`ietf-routing.groovy` - initialization
----
def plugin = new CompactYangPlugin()
def builder =
    new org.bitbucket.novakmi.yangbuilder.YangBuilder(2, plugin, [doNl: true, doQuote: true])      <1>
plugin.declareCommonAliasesAndQuotes()                                                             <2>
builder.quoteKeywords +=
     ["mandatory", "config", "min-elements", "default", "if-feature", "refine", "augment",         <3>
      "range", "units", "yang-version"]
----
1. Create builder with indent 2, registered `plugin` and <<configMap, `configMap`>> with
   <<doNl, `doNl`>> and <<doQuote, `doQuote`>> elements, which help to follow `yang` style
   often used in `ietf` data model (new line after `description`, using quotes even when not
   required by `yang`)
2. Declare common aliases for the Yang language conflicting with groovy syntax and keywords (e.g. `leaf-list`
   can be used as `leaf_list`, see  <<compactPlugin,`CompactYangPlugin`>> source file)
3. Append to the list of <<quotes, `quote`>> keywords (use quoted value for the keywords, even though
   not required by the `yang`).

[source,groovy]
.`ietf-routing.groovy` - use of `doSplitOnPlus`
----
when "derived-from-or-self(../../rt:address-family, +" +
                "'v${afi}ur:ipv$afi-unicast')", doSplitOnPlus: true,                                <1>
----
1. See description of <<splitOnPlus, `doSplitOnPlus`>> attribute.


[source,groovy]
.`ietf-routing.groovy` - use of programming language (loop)
----
[4, 6].each { afi ->                                             <1>
    identity "ipv${afi}", "address-family",
        "This identity represents IPv${afi} address family."
}
----
1. `IPv4` and `IPv6` variant is generated in loop with common code.


==== `ietf-interfaces` data model

* `ietf-interfaces-1` - this <<yangbuilder>> script tries to be similar to the original <<yang>> file,
   it already uses the `CompactYangPlugin` to define some child elements as attributes
* `ietf-interfaces-2` - this <<yangbuilder>> script uses the <<compactPlugin,`CompactYangPlugin`>> more "extensively",
   it defines all child elements as attributes to parent element. The semicolons and curly brackets are not used.
* `ietf-interfaces-3` - this <<yangbuilder>> script is similar to previous one  (`ietf-interfaces-2`).
   It shows possible splitting and reuse of parts of the script into closures and functions (e.g. repeated part of `description` text is made by defining new closure `stat_leaf`).

NOTE:: This example is not fully up to date

==== `ietf-isis` data model

* `ietf-isis-1` - this <<yangbuilder>> script tries to be similar to the original <<yang>> file,
   it already uses the <<compactPlugin,`CompactYangPlugin`>> to define some child elements as attributes, the file
   was converted from original (some parts were converted with use of regular expressions, search, replace,
   the other parts had to be converted manually)
* `ietf-isis-2` - this <<yangbuilder>> script uses the <<compactPlugin,`CompactYangPlugin`>> more "extensively", it defines all
   child elements as attributes to parent element.
   The semicolons and curly brackets are not used. Some elements were reordered (mainly `description`
   to use more compact <<yangbuilder>> features)

NOTE:: This example is not fully up to date

== Build in attributes

The <<yangbuilder>> elements can have following attributes:

* `indent` enable/disable indentation for the element (indentation is enabled by default)

[source,groovy]
---------
description
    '''test quotes
in multiline
description''', indent: true
---------
* `quotes` force to surround element value with quotes (with provided quotes character), even though quotes are not needed;
  see also <<quotes,special quotes handling>>.

[source,groovy]
---------
contact 'it.novakmi@gmail.com', quotes: '"'
---------

* `noAutoQuotes` do not add automatic quotes for element with <<quotes,special quotes handling>>

[source,java]
---------
description 'test quotes', noAutoQuotes: true
---------
WARNING: Element statements without quotes may lead to an invalid yang.

See `YangBuilderTest.groovy`, tests `quoteTest` and `commentTest` for other examples and corresponding <<yang>> result.

* `cmt` add inline comment to the element, the comment is on the same line, see also <<cmt,cmt keyword>>

[source,groovy]
---------
container 'socket', cmt: "Inline comment for socket container"
---------

[[splitOnPlus]]
* `doSplitOnPlus` - sometimes it is necessary to split string values into several lines and add plus (`+`) sign
 between them.

[source,groovy]
.line split with plus in the `yang`
---------
 augment "/rt:routing-state/rt:ribs/rt:rib/rt:routes/rt:route/"
        + "rt:next-hop/rt:next-hop-options/rt:simple-next-hop" {
---------

For this `doSplitOnPlus` can be used.

[source,groovy]
.line split with plus modelled the `yangbuilder`
---------
 augment "/rt:routing-state/rt:ribs/rt:rib/rt:routes/rt:route/+" +
            "rt:next-hop/rt:next-hop-options/rt:simple-next-hop", doSplitOnPlus: true, {
---------

The plus (`+`) sign at the end of line makes split. In case plus sign is part of the string, it can be escaped with slash
(`\\+`).

See `YangBuilderTest.groovy`, test `splitOnPlusTest`.


The `doSplitOnPlus` can be forced automatically with <<configMap, `configMap`>> feature

* `_yng`
The  `_yng` attribute is ignored.

== Keywords

Some keywords have special meaning, when used with the <<yangbuilder>>

=== `yangroot`

Can be used as first element being built (instead of `module` or `submodule`).
This element is not reflected in the <<yang>> file. In this way it is possible to
add text (e.g. comments) to the top of the <<yangfile>> (e.g. before `module`).
It is often used with <<geninfo,`geninfo`>> keyword.

[[geninfo]]
=== `genifo`

This keyword is intended to be placed in the beginning of data model to generate
<<yangbuilder>> header text.

[source,groovy]
---------
builder.yangroot {                                                                  <1>
    geninfo file: "acmeYang.groovy",                                                <2>
        time: true,                                                                 <3>
        cmt: '''\nExample implementation from yang tutorial                         <4>
                http://www.yang-central.org/twiki/bin/view/Main/YangTutorials'''

---------
<1> if used  in `yangroot`, it is printed directly to the top of the <<yang>> file
<2> optional file attribute
<3> optional time attribute
<4> optional comment attribute (use `\n` in front to place new line between comment and default text)

The resulting <<yang>> header comment looks like:

[source,groovy]
---------
/*
***** DO NOT EDIT THIS FILE! *****
This 'yang' file was generated with Groovy 'yangbuilder'
(http://bitbucket.org/novakmi/yangbuilder)
Original file is acmeYang.groovy
Generated on Mon May 15 23:15:57 CEST 2017

Example implementation from yang tutorial
http://www.yang-central.org/twiki/bin/view/Main/YangTutorials
*/
---------

=== `yngbuild`

This keyword echoes its value directly to the yang file. This is useful, if it is not possible to create content of the  <<yang>> file  
with regular builder syntax. The `yngbuild` keyword accepts optional attribute `indent`. If `indent` value evaluates to `true`, the elements
value is indented according to the current nesting level, otherwise no indentation is performed.

Example:

`yngbuild "" //new line`

`yngbuild "/* not indented comment */"`

`yngbuild "/* indented comment */", indent:true`

NOTE: It is preferred to use <<cmt,`cmt`>> keyword for comments and
`nl`, `pnl` , `nlLevel` attributes (from <<compactPlugin,`CompactYangPlugin`>>)
 rather than `yngbuild` keyword

[[cmt]]
=== `cmt` keyword

`cmt` keyword is similar to the `yngbuild` keyword. It is intended to simplify writing of the <<yang>> comments.

As default, one-line indented comment is produced:

`cmt "This is inline indented comment"`

Other options are:

`cmt "This is inline, not indented comment", indent: false`

`cmt "This is non-inline indented comment", inline: false`

`cmt "This is non-inline comment, not indented comment", indent: false, inline: false`

Inline comments have `//` as comment mark, non-inline comments use `/*` and `*/` on separate lines.
Indented comments are indented according to the current indent (level of nesting).

See `YangBuilderTest.groovy`, test `commentTest` for examples and corresponding <<yang>> result.

=== `yngcmd`

The `ymgcmd` is reserved keyword that is ignored by the <<yangbuilder>>. It can be used for special
purposes in plugins.

[[quotes]]
=== <<yang>> keywords with special handling for quotes
 
The value of the following <<yang>> keywords will be automatically surrounded with quotes, if needed.
This is done when string contains any space or tab characters, a semicolon (";"),
braces ("{" or "}") or comment sequences ("//", "/*", or "*/"). 

Double quotes are preferred. If string already contains double quotes, single quotes are used.

* 'reference'
* 'contact'
* 'description'
* 'presence'
* 'organization'
* 'namespace'
* 'key'
* 'pattern'
* 'prefix'
* 'must'
* 'error-message'
* 'when'

See <<RFC6020>> section.6.1.3.

These keywords are called `quoteKeywords` and can be extended. For example:

[source,groovy]
---------
builder.quoteKeywords += ["mandatory","range", "units", "yang-version"]
---------

Example: 

`description "description of the model"`

[[doQuote]]
Sometimes quotes are required, even though they are not necessary by the `yang` syntax.
With these special keywords one can use  `doQuote` attribute
(e.g. `description "test", doQuote:true`) which adds always quotes to the value.
The difference from  `quotes` attribute is that is processed only for
the quoteKeywords and the <<yangbuilder>> decides what to use as quote attribute (usually `"`).
The `doQuote` can be forced automatically with <<configMap, `configMap`>> feature.

[[doNl]]
=== <<yang>> keywords with special handling for new lines

Together with `doNl` attribute, following keywords print their value on new line
(often used in IETF data models)

* `description`
* `reference`
* `organization`
* `contact`


[source,groovy]
---------
description "Text on next line", doNl: true
---------

These keywords are called `autoNlKeywords` and can be extended. For example:

[source,groovy]
---------
builder.autoNlKeywords += ["range"]
---------

The `doNl` can be forced automatically with <<configMap, `configMap`>> feature.

[[configMap]]
=== ConfigMap

The config map is <<nodebuilder>> feature. The builder holds map that can be used during
processing. Function `isKeyInConfigOrNodeAttr(node, key)` returns `true` if passed `key`
has `true` value in the config map or passed `node` has true value for attribute named
`key`.

== Plugins

Plugins can extend <<yangbuilder>> with additional functionality.  Plugin has to implement `NodeBuilderPlugin` abstract 
class interface (part of <<nodebuilder>>). 

Plugins are registered with `registerPlugin` method or they can be 
passed as second argument, when creating the builder (it is possible to pass one instance or list of plugin instances). 

Once the plugin know the builder to which it was registered (last registered).

Example:

[source, java]
---------
def builder = new YangBuilder(2, new CompactYangPlugin()) 
---------

Plugins, which are part of the <<yangbuilder>> distribution, are described in the next subsections.

[[compactPlugin]]
=== CompactYangPlugin

This plugin allows to shorten <<yang>> syntax and write yang in more compact way.
In most cases, it allows to write sub-elements as attributes.

Example:

[source,groovy]
---------
leaf "node", type: string
---------

which is equivalent to

[source,java]
---------
leaf "node", {
  type string;
}
---------

See `CompactYangPlugin.groovy` for implementation and `CompactYangPluginTest.groovy`
for plugin usage and examples.

=== TailfCompactYangPlugin

This plugin is intended to support compact syntax for some publicly know Tail-f <<yang>> extensions (visit http://www.tail-f.com)

Currently it supports only `tailf:info` extension.

* `tailf:info` 
* `tailf:info-description` - which combines `tailf:info` and `description`

See `TailfCompactYangPluginTest.groovy` file for examples.


=== GroupingResolverPlugin

This plugin resolves all `groupings` within the builder and returns new `BuilderNode` which represents root of
the <<yang>> model, in which all `groupings` are expanded (resolved).

See `GroupingResolverPlugin` for example of plugin implementation and
`GroupingResolverPluginTest.groovy` for plugin usage examples.

== The <<groovy>> interface

See groovydoc package for the <<yangbuilder>> and <<nodebuilder>>
(the <<yangbuilder>> inherits interface methods from the <<nodebuilder>>).

=== <<nodebuilder>> <<groovy>> interface


`TreeNodeBuilder`

* `declareAlias` declare alias for keyword; e.g. can be used to declare aliases for  <<yang>> keywords, which are also <<groovy>> keywords 
* `reset` - reset the content of the builder (calls also `reset` on all registered plugins)
* `findNode` - return first `BuilderNode` with given name
* `getRootNode` - return `BuilderNode` reference to the root node
* `addConfig` - append map passed as parameter to the builder <<configMap, `configMap`>>
* `getConfigVal` - for given key return value from <<configMap, `configMap`>>
* `isKeyInConfigOrNodeAttr` - return true if given key has a `true` value in <<configMap, `configMap`>> or if it is
   `true` attribute of given node

[source,java]
.Exampple of `declareAlias`
---------
builder.declareAlias('import_', 'import') // declare 'import_' as alias  for 'import'
...
'import'('my-module1') //groovy keyword has to be surrounded with quotes
import_ 'my-module2' //or alias can be used
---------


`PluginTreeNodeBuilder`

* `registerPlugin`
* `unregisterPlugin`
* `getNumberOfRegisteredPlugins`

`TextPluginTreeNodeBuilder`

* `getText` return textual representation of the <<yang>> data model
* `writeToFile` write textual representation of the <<yang>> data model to the file
* `trimAndQuoteLines`  format (and trim) several lines of strings and surround them
   with quotes, if needed.

`BuilderNode`

* `getNodePath`
* `shallowCopy`

attributtes

`name`,`parent`, `attributes`, `value`, `children`


`NodeBuilderPlugin`

* `reset`
* `setMyBuilder`
* `getMyBuilder`

=== <<yangbuilder>> <<groovy>> interface

`YangBuilder`

* `getYangName` returns the name of first `module` or `submodule` element
* `getPrefixName` returns the name of `prefix` of the first `module` or `submodule` (`belongs-to` prefix)
* `addQuoteKeywords` specify additional keywords for <<quotes,special quotes handling>>

[source,groovy]
---------
builder.getYangName()
builder.getPrefixName()
builder.addQuoteKeywords('my-annotation')
---------

== Syntax

=== Recommended <<yangbuilder>> syntax

1. no semicolons at the end
1. avoid use of parentheses for values, if possible
1. prefer to use `yang` reuse features (`grouping`), if possible
1. reuse often repeated (and similar) blocks (use programming language -
   loops, closures, functions)
1. split long data models into several logical parts (files)
1. use conditions to generate different versions of the data model

=== Recommended compact yang syntax

1. model single line elements (not containing sub-elements) as attributes

=== Recommended <<yang>> syntax

1. do not use quotes, if not necessary
1. place the single line elements (without sub-elements) first in the
   data model structure (simplifies conversion to compact yang syntax)
